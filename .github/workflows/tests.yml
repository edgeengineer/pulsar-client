name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: ${{ matrix.artifact-name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - artifact-name: pulsar-client-linux-static-musl-aarch64
            os: ubuntu-24.04-arm
            container: swift:6.1.0
            swift-sdk: aarch64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
            product: PulsarClient
          - artifact-name: pulsar-client-linux-static-musl-x86_64
            os: ubuntu-24.04-arm
            container: swift:6.1.0
            swift-sdk: x86_64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
            product: PulsarClient
          - artifact-name: pulsar-client-macos-arm64
            os: macos-15
            xcode-select: /Applications/Xcode_16.3.app
            product: PulsarClient
    
    steps:
    - uses: actions/checkout@v4
    - name: Install Static Linux SDK
      if: ${{ matrix.swift-sdk-url != '' }}
      run: |
        swift sdk install ${{ matrix.swift-sdk-url }} --checksum ${{ matrix.swift-sdk-checksum }}
    - name: xcode-select
      if: ${{ matrix.xcode-select != '' }}
      run: |
        sudo xcode-select --switch ${{ matrix.xcode-select }}
    - name: Build
      shell: bash
      run: |
        args=(
          --configuration release
          --product "${{ matrix.product }}"
        )

        if [ -n "${{ matrix.swift-sdk }}" ]; then
          args+=(--swift-sdk "${{ matrix.swift-sdk }}")
        fi

        swift build "${args[@]}"
    - name: Run Unit Tests
      run: swift test --filter PulsarClientTests
    
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4

    - name: Install Swift
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y wget
        
        # Check if Swift is already installed
        if [ ! -f "/opt/swift/usr/bin/swift" ]; then
          # Download and install Swift 6.1
          wget https://download.swift.org/swift-6.1-release/ubuntu2204/swift-6.1-RELEASE/swift-6.1-RELEASE-ubuntu22.04.tar.gz
          tar xzf swift-6.1-RELEASE-ubuntu22.04.tar.gz
          sudo rm -rf /opt/swift
          sudo mv swift-6.1-RELEASE-ubuntu22.04 /opt/swift
        else
          echo "Swift already installed at /opt/swift"
        fi
        echo "/opt/swift/usr/bin" >> $GITHUB_PATH
        
        # Install runtime dependencies
        sudo apt-get install -y \
          binutils \
          git \
          gnupg2 \
          libc6-dev \
          libcurl4-openssl-dev \
          libedit2 \
          libgcc-9-dev \
          libpython3.8 \
          libsqlite3-0 \
          libstdc++-9-dev \
          libxml2-dev \
          libz3-dev \
          pkg-config \
          tzdata \
          unzip \
          zlib1g-dev

    - name: Start Pulsar and Toxiproxy
      run: docker compose -f docker/docker-compose.integration.yml up -d --wait
    #   continue-on-error: true

    - name: Wait for broker health (integration)
      run: |
        echo "Waiting for Pulsar Admin API to be fully ready on 8081..."
        timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8081/admin/v2/brokers/health; do sleep 2; done'

    - name: Smoke check broker ports (integration)
      run: |
        (echo -n | nc -vz localhost 6650) || true
        curl -sSf http://localhost:8081/admin/v2/brokers/health || true

    # - name: Check container status and logs
    #   run: |
    #     echo "=== Container Status ==="
    #     docker ps -a
    #     echo "=== Pulsar Logs ==="
    #     docker logs pulsar 2>&1 || echo "No pulsar logs available"
    #     echo "=== Toxiproxy Logs ==="
    #     docker logs toxiproxy 2>&1 || echo "No toxiproxy logs available"
    
    - name: Configure Toxiproxy
      run: |
        curl -X POST http://localhost:8474/proxies \
          -H 'Content-Type: application/json' \
          -d '{
            "name": "pulsar",
            "listen": "0.0.0.0:16650",
            "upstream": "pulsar:6650",
            "enabled": true
          }'
        echo "Toxiproxy configured successfully"
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6650
        PULSAR_ADMIN_URL: http://localhost:8081
        TOXIPROXY_URL: http://localhost:8474
        TOXIPROXY_SERVICE_URL: pulsar://localhost:16650
        # For Connection Failure Recovery test, temporarily override to use Toxiproxy
        PULSAR_TOXIPROXY_SERVICE_URL: pulsar://localhost:16650
        LOG_LEVEL: debug
        SWIFT_BACKTRACE: enable
      timeout-minutes: 15  # Reduced from 20 due to parallelism
      run: |
        set -o pipefail
        # Run all tests in parallel now that Connection Failure Recovery is fixed
        swift test --filter PulsarClientIntegrationTests --parallel --num-workers 4 2>&1 | tee integration-tests.log
        status=${PIPESTATUS[0]}
        echo "==== Swift Test Failure Summary (integration) ===="
        grep -En "error:|Assertion failed|Expectation failed|Test Case '-.*' failed|Failing tests|timeout|fatal error|segmentation" integration-tests.log || true
        echo "==== XCTest Summary (integration) ===="
        grep -En "Test Suite|Test Case|Executed|passed|failed" integration-tests.log | tail -n 200 || true
        exit $status
    
    - name: Collect logs (integration) (always)
      if: always()
      run: |
        echo "=== Container Status ===" && docker ps -a || true
        echo "=== Pulsar Logs (last 500 lines) ===" && docker logs pulsar --since 30m | tail -n 500 || true
        echo "=== Toxiproxy Logs (last 200 lines) ===" && docker logs toxiproxy --since 30m | tail -n 200 || true

    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.integration.yml down -v

  integration-tests-auth:
    name: Integration Tests with Authentication
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4
    
    - name: Start Pulsar with Auth
      run: |
        docker compose -f docker/docker-compose.auth.yml up -d --wait
        echo "Waiting for Pulsar Admin API to be fully ready..."
        timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8081/admin/v2/brokers/health; do sleep 5; done'
        echo "Fetching admin token for health check..."
        ADMIN=$(docker exec pulsar-auth cat /pulsar/conf/admin.token | xargs)
        echo "Health (authed):" && curl -s -f -H "Authorization: Bearer ${ADMIN}" http://localhost:8081/admin/v2/brokers/health >/dev/null || true

    - name: Smoke check broker ports (auth)
      run: |
        (echo -n | nc -vz localhost 6651) || true
        curl -sSf http://localhost:8081/admin/v2/brokers/health || true
    
    - name: Get Auth Token
      id: auth
      run: |
        TOKEN=$(docker exec pulsar-auth cat /pulsar/conf/client.token | xargs)
        echo "token=${TOKEN}" >> "$GITHUB_OUTPUT"
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6651
        PULSAR_ADMIN_URL: http://localhost:8081
        PULSAR_AUTH_TOKEN: ${{ steps.auth.outputs.token }}
        LOG_LEVEL: debug
        SWIFT_BACKTRACE: enable
      timeout-minutes: 20
      run: |
        set -o pipefail
        swift test --filter PulsarClientIntegrationTests 2>&1 | tee integration-tests-auth.log
        status=${PIPESTATUS[0]}
        echo "==== Swift Test Failure Summary (auth) ===="
        grep -En "error:|Assertion failed|Expectation failed|Test Case '-.*' failed|Failing tests|timeout|fatal error|segmentation" integration-tests-auth.log || true
        echo "==== XCTest Summary (auth) ===="
        grep -En "Test Suite|Test Case|Executed|passed|failed" integration-tests-auth.log | tail -n 200 || true
        exit $status

    - name: Collect logs (auth) (always)
      if: always()
      run: |
        echo "=== Container Status ===" && docker ps -a || true
        echo "=== Pulsar-Auth Logs (last 500 lines) ===" && docker logs pulsar-auth --since 30m | tail -n 500 || true
    
    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.auth.yml down -v

  integration-tests-cluster:
    name: Integration Tests with Cluster
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4
    - name: Start Pulsar Cluster
      run: |
        docker compose -f docker/docker-compose.cluster.yml up -d --wait
        echo "Waiting for Pulsar Admin API to be fully ready..."
        timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8080/admin/v2/brokers/health; do sleep 5; done'

    - name: Smoke check broker ports (cluster)
      run: |
        (echo -n | nc -vz localhost 6650) || true
        curl -sSf http://localhost:8080/admin/v2/brokers/health || true
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6650
        PULSAR_ADMIN_URL: http://localhost:8080
        LOG_LEVEL: debug
        SWIFT_BACKTRACE: enable
      timeout-minutes: 20
      run: |
        set -o pipefail
        swift test --filter PulsarClientIntegrationTests 2>&1 | tee integration-tests-cluster.log
        status=${PIPESTATUS[0]}
        echo "==== Swift Test Failure Summary (cluster) ===="
        grep -En "error:|Assertion failed|Expectation failed|Test Case '-.*' failed|Failing tests|timeout|fatal error|segmentation" integration-tests-cluster.log || true
        echo "==== XCTest Summary (cluster) ===="
        grep -En "Test Suite|Test Case|Executed|passed|failed" integration-tests-cluster.log | tail -n 200 || true
        exit $status

    - name: Collect logs (cluster) (always)
      if: always()
      run: |
        echo "=== Container Status ===" && docker ps -a || true
        echo "=== Cluster Broker Logs (last 500 lines) ===" && docker logs pulsar --since 30m | tail -n 500 || true
    
    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.cluster.yml down -v
