name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: ${{ matrix.artifact-name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - artifact-name: pulsar-client-linux-static-musl-aarch64
            os: ubuntu-24.04-arm
            container: swift:6.1.0
            swift-sdk: aarch64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
            product: PulsarClient
          - artifact-name: pulsar-client-linux-static-musl-x86_64
            os: ubuntu-24.04-arm
            container: swift:6.1.0
            swift-sdk: x86_64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
            product: PulsarClient
          - artifact-name: pulsar-client-macos-arm64
            os: macos-15
            xcode-select: /Applications/Xcode_16.3.app
            product: PulsarClient
    
    steps:
    - uses: actions/checkout@v4
    - name: Install Static Linux SDK
      if: ${{ matrix.swift-sdk-url != '' }}
      run: |
        swift sdk install ${{ matrix.swift-sdk-url }} --checksum ${{ matrix.swift-sdk-checksum }}
    - name: xcode-select
      if: ${{ matrix.xcode-select != '' }}
      run: |
        sudo xcode-select --switch ${{ matrix.xcode-select }}
    - name: Build
      shell: bash
      run: |
        args=(
          --configuration release
          --product "${{ matrix.product }}"
        )

        if [ -n "${{ matrix.swift-sdk }}" ]; then
          args+=(--swift-sdk "${{ matrix.swift-sdk }}")
        fi

        swift build "${args[@]}"
    - name: Run Unit Tests
      run: swift test --filter PulsarClientTests
    
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4

    - name: Start Pulsar and Toxiproxy
      run: docker compose -f docker/docker-compose.integration.yml up -d --wait
    #   continue-on-error: true

    # - name: Check container status and logs
    #   run: |
    #     echo "=== Container Status ==="
    #     docker ps -a
    #     echo "=== Pulsar Logs ==="
    #     docker logs pulsar 2>&1 || echo "No pulsar logs available"
    #     echo "=== Toxiproxy Logs ==="
    #     docker logs toxiproxy 2>&1 || echo "No toxiproxy logs available"
    
    - name: Configure Toxiproxy
      run: |
        curl -X POST http://localhost:8475/proxies \
          -H 'Content-Type: application/json' \
          -d '{
            "name": "pulsar",
            "listen": "0.0.0.0:16650",
            "upstream": "localhost:6650",
            "enabled": true
          }'
        echo "Toxiproxy configured successfully"
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6650
        PULSAR_ADMIN_URL: http://localhost:8081
        TOXIPROXY_URL: http://localhost:8475
      timeout-minutes: 20
      run: swift test --filter PulsarClientIntegrationTests
    
    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.integration.yml down -v

  integration-tests-auth:
    name: Integration Tests with Authentication
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4
    
    - name: Start Pulsar with Auth
      run: |
        docker compose -f docker/docker-compose.auth.yml up -d --wait
        echo "Waiting for Pulsar Admin API to be fully ready..."
        timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8081/admin/v2/brokers/health; do sleep 5; done'
    
    - name: Get Auth Token
      id: auth
      run: |
        TOKEN=$(docker exec pulsar-auth cat /pulsar/conf/client.token | xargs)
        echo "token=${TOKEN}" >> "$GITHUB_OUTPUT"
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6651
        PULSAR_ADMIN_URL: http://localhost:8081
        PULSAR_AUTH_TOKEN: ${{ steps.auth.outputs.token }}
      timeout-minutes: 20
      run: swift test --filter PulsarClientIntegrationTests
    
    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.auth.yml down -v

  integration-tests-cluster:
    name: Integration Tests with Cluster
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - swift-version: '6.1'
            product: PulsarClient
    steps:
    - uses: actions/checkout@v4
    - name: Start Pulsar Cluster
      run: |
        docker compose -f docker/docker-compose.cluster.yml up -d --wait
        echo "Waiting for Pulsar Admin API to be fully ready..."
        timeout 120 bash -c 'until curl -s -f -o /dev/null http://localhost:8080/admin/v2/brokers/health; do sleep 5; done'
    
    - name: Run Integration Tests
      env:
        PULSAR_SERVICE_URL: pulsar://localhost:6650
        PULSAR_ADMIN_URL: http://localhost:8080
      timeout-minutes: 20
      run: swift test --filter PulsarClientIntegrationTests
    
    - name: Cleanup
      if: always()
      run: docker compose -f docker/docker-compose.cluster.yml down -v
